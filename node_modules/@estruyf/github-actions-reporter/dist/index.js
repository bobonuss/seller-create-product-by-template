"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@actions/core"));
const path_1 = require("path");
const getHtmlTable_1 = require("./utils/getHtmlTable");
const getTableRows_1 = require("./utils/getTableRows");
const getTestStatusIcon_1 = require("./utils/getTestStatusIcon");
const summary_1 = require("@actions/core/lib/summary");
const path_2 = require("path");
const fs_1 = require("fs");
class GitHubAction {
    constructor(options = {}) {
        this.options = options;
        console.log(`Using GitHub Actions reporter`);
    }
    onBegin(_, suite) {
        this.suite = suite;
    }
    onStdOut(chunk, test, result) {
        console.log(chunk.toString());
    }
    onEnd(result) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (process.env.NODE_ENV === "development") {
                const summaryFile = (0, path_2.join)(__dirname, "../summary.html");
                if ((0, fs_1.existsSync)(summaryFile)) {
                    (0, fs_1.unlinkSync)(summaryFile);
                }
                (0, fs_1.writeFileSync)(summaryFile, "", "utf-8");
                process.env[summary_1.SUMMARY_ENV_VAR] = summaryFile;
                process.env.GITHUB_ACTIONS = "true";
            }
            if (process.env.GITHUB_ACTIONS && this.suite) {
                const os = process.platform;
                const summary = core.summary;
                summary.addHeading(this.options.title || `Test results`, 1);
                summary.addRaw(`Total tests: ${this.suite.allTests().length}`);
                if (this.options.useDetails) {
                    summary.addSeparator();
                }
                for (const suite of (_a = this.suite) === null || _a === void 0 ? void 0 : _a.suites) {
                    const project = suite.project();
                    // Get all the test files
                    const files = suite
                        .allTests()
                        .map((test) => test.location.file)
                        .reduce((acc, curr) => {
                        if (!acc.includes(curr)) {
                            acc.push(curr);
                        }
                        return acc;
                    }, []);
                    // Get all the tests per file
                    const tests = files.reduce((acc, curr) => {
                        acc[curr] = suite.allTests().filter((test) => {
                            return test.location.file === curr;
                        });
                        return acc;
                    }, {});
                    for (const filePath of Object.keys(tests)) {
                        const fileName = (0, path_1.basename)(filePath);
                        if (this.options.useDetails) {
                            const content = (0, getHtmlTable_1.getHtmlTable)(tests[filePath], !!this.options.showError);
                            // Check if there are any failed tests
                            const testStatusIcon = (0, getTestStatusIcon_1.getTestStatusIcon)(tests[filePath]);
                            summary.addDetails(`${testStatusIcon} ${fileName} (${os}${project.name ? ` / ${project.name}` : ""})`, content);
                        }
                        else {
                            summary.addHeading(`${fileName} (${os}${project.name ? ` / ${project.name}` : ""})`, 2);
                            const tableRows = (0, getTableRows_1.getTableRows)(tests[filePath], !!this.options.showError);
                            summary.addTable(tableRows);
                        }
                    }
                }
                yield summary.write();
            }
            if (result.status !== "passed") {
                core.setFailed("Tests failed");
            }
        });
    }
}
exports.default = GitHubAction;
